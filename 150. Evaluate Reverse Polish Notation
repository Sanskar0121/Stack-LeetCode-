CODE : 

class Solution:
    def evalRPN(self, tokens: List[str]) -> int:
        stack = [] 
        for c in tokens:
            if c == "+":
                stack.append(stack.pop() + stack.pop()) 
            elif c == "-":
                a,b = stack.pop(), stack.pop() 
                stack.append(b - a)
            elif c == "*":
                stack.append(stack.pop() * stack.pop()) 
            elif c == "/":
                a, b = stack.pop(), stack.pop() 
                stack.append(int(float(b)/ a)) 
            else:
                stack.append(int(c)) 
        return stack[0] 

EXPLANATION : 

🧮 What is Reverse Polish Notation (RPN)?
In RPN, operators come after their operands.
For example:

["2", "1", "+", "3", "*"] means → (2 + 1) * 3 → 9

["4", "13", "5", "/", "+"] means → 4 + (13 / 5) → 6

🧱 Code Overview
python
Copy
Edit
def evalRPN(self, tokens: List[str]) -> int:
This function takes a list of strings (tokens) and returns the result of evaluating the RPN expression.

🔁 Loop Through Tokens
python
Copy
Edit
stack = []
for c in tokens:
We use a stack to store numbers as we process them. We iterate through each token c in the input.

➕➖✖️➗ Operators
➕ Addition
python
Copy
Edit
if c == "+":
    stack.append(stack.pop() + stack.pop())
Pop two values from the stack and add them.

Push the result back.

➖ Subtraction
python
Copy
Edit
elif c == "-":
    a, b = stack.pop(), stack.pop()
    stack.append(b - a)
a is the second number (top of stack), b is the first.

We do b - a, not a - b, because stack pops in reverse order.

✖️ Multiplication
python
Copy
Edit
elif c == "*":
    stack.append(stack.pop() * stack.pop())
Just multiply the top two numbers on the stack.

➗ Division
python
Copy
Edit
elif c == "/":
    a, b = stack.pop(), stack.pop()
    stack.append(int(float(b) / a))
Division must truncate toward zero.

float(b) / a ensures precision.

int(...) truncates the result toward zero (Python does floor division by default for integers).

📥 Operand (Number)
python
Copy
Edit
else:
    stack.append(int(c))
If it's not an operator, convert it to int and push onto the stack.

🔚 Final Result
python
Copy
Edit
return stack[0]
At the end, only one result will remain on the stack — the answer!

🧪 Example Walkthrough
Input:

python
Copy
Edit
tokens = ["2", "1", "+", "3", "*"]
Step-by-step:

Push 2 → [2]

Push 1 → [2, 1]

"+" → Pop 1 & 2 → 2+1=3 → Push 3 → [3]

Push 3 → [3, 3]

"*" → Pop 3 & 3 → 3×3=9 → Push 9 → [9]

✅ Final result = 9

⏱️ Time & Space Complexity
Operation	Complexity
Time	O(n)
Space (stack)	O(n) 
