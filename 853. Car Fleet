CODE: 
class Solution:
    def carFleet(self, target: int, position: List[int], speed: List[int]) -> int:
        pair = [(p, s) for p, s in zip(position, speed)] 
        pair.sort(reverse=True) 
        stack = [] 
        for p, s in pair:
            stack.append((target - p) / s) 
            if len(stack) >= 2 and stack[-1] <= stack[-2]:
                stack.pop() 
        return len(stack) 

EXPLANATION: 
🔍 Problem Statement (Leetcode 853 - Car Fleet)
You're given:

A target location.

A list of positions of cars (starting positions).

A list of speeds of the cars.

Each car drives towards the target at a constant speed. If a faster car catches up with a slower car ahead of it, it cannot pass and instead forms a fleet with it (they move together at the slower speed).

You have to return the number of car fleets that will arrive at the destination.

✅ Code Explanation
python
Copy code
class Solution:
    def carFleet(self, target: int, position: List[int], speed: List[int]) -> int:
This is the main function taking the destination point target, and two lists: position and speed.

python
Copy code
        pair = [(p, s) for p, s in zip(position, speed)]
Create a list of tuples pairing up each car’s position with its speed.

python
Copy code
        pair.sort(reverse=True)
Sort the pairs by position in descending order (farthest from the target comes first). This helps in comparing cars from closest to target to farthest.

python
Copy code
        stack = []
We'll use a stack to keep track of fleets (using their time to reach the target).

python
Copy code
        for p, s in pair:
            stack.append((target - p) / s)
For each car, calculate its time to reach the target and push it to the stack.

python
Copy code
            if len(stack) >= 2 and stack[-1] <= stack[-2]:
                stack.pop()
If the current car’s time is less than or equal to the time of the car ahead (i.e., top of the stack), it means this car catches up and merges into the same fleet. So we remove it (it doesn't form a new fleet).

python
Copy code
        return len(stack)
The remaining elements in the stack are the final car fleets.

🧪 Dry Run Example
Let’s take this example:

python
Copy code
target = 12
position = [10, 8, 0, 5, 3]
speed = [2, 4, 1, 1, 3]
Step 1: Pair and sort
python
Copy code
pair = [(10,2), (8,4), (0,1), (5,1), (3,3)]
After sorting by position descending:

python
Copy code
pair = [(10,2), (8,4), (5,1), (3,3), (0,1)]
Step 2: Iterate and compute time to reach target
We process each car in order:

Car (10, 2): Time = (12 - 10)/2 = 1.0 → stack = [1.0]

Car (8, 4): Time = (12 - 8)/4 = 1.0 → stack = [1.0, 1.0]
→ 1.0 ≤ 1.0 → pop() → stack = [1.0] (Merged into 1 fleet)

Car (5, 1): Time = (12 - 5)/1 = 7.0 → stack = [1.0, 7.0]

Car (3, 3): Time = (12 - 3)/3 = 3.0 → stack = [1.0, 7.0, 3.0]
→ 3.0 ≤ 7.0 → pop() → stack = [1.0, 7.0]

Car (0, 1): Time = (12 - 0)/1 = 12.0 → stack = [1.0, 7.0, 12.0]

Final stack = [1.0, 7.0, 12.0] → ✅ Answer = 3 fleets
🧠 Summary
We sort cars by position (closest to destination first).

For each car, compute time to reach the target.

If a car arrives earlier or at the same time as the car ahead, it merges.

Stack length = total fleets.
